#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import with_statement

import os
import sys
import glob
import urllib
import hashlib
import logging
from os import path
from datetime import datetime

sys.path.extend(glob.glob(path.join(path.dirname(__file__), "libs/*")))

from mutagen import File
from mako.template import Template
from mako import exceptions

log = logging.getLogger()


class obj(object):
    def __init__(self, attrs):
        self.__dict__.update(attrs)

def seconds2duration(seconds):
    return "%d:%02d" %(seconds / 60, seconds % 60)

def mp3_attr(mp3, key, attr="text"):
    if key not in mp3:
        return ""
    val = mp3[key]
    val = getattr(val, attr)
    if isinstance(val, list) and len(val) > 0:
        val = val[0]
    return val or ""

def make_permalink(prefix, filename, md5):
    return "%s/%s?md5=%s" %(
        prefix,
        urllib.quote(os.path.basename(filename)),
        md5,
    )

def mtime(filename):
    mtime_epoch = os.path.getmtime(filename)
    return datetime.fromtimestamp(mtime_epoch)

def main():
    logging.basicConfig()
    if len(sys.argv) != 4:
        print "Usage: %s FEED_URL MP3_URL_PREFIX MP3_DIR" %(sys.argv[0], )
        print "Example: %s https://example.com/podcast/feed.atom https://example.com/podcast/mp3s/ mp3s/" %(sys.argv[0], )
        return 1

    feed_url, mp3_url_prefix, mp3_dir = sys.argv[1:]
    mp3_url_prefix = mp3_url_prefix.rstrip("/")

    items = []
    for filename in glob.glob(mp3_dir + "/*.mp3"):
        mp3 = File(filename)
        #{u'APIC:': APIC(encoding=0, mime=u'image/png', type=0, desc=u'', data=...'), 'TDRC': TDRC(encoding=0, text=[u'2014']), 'TIT2': TIT2(encoding=0, text=[u'Hoss Gifford on Feb 27th']), u"COMM::'eng'": COMM(encoding=0, lang='eng', desc=u'', text=[u'These are the comments ']), 'TRCK': TRCK(encoding=0, text=[u'1']), 'TPE1': TPE1(encoding=0, text=[u'xvzf']), 'TALB': TALB(encoding=0, text=[u'nontrivial']), 'TCOM': TCOM(encoding=0, text=[u'Hoss Gifford'])}
        image_url = None
        apic = mp3.get("APIC:")
        if apic:
            png = filename + ".png"
            with open(png, "w") as f:
                f.write(apic.data)
            image_url = "%s/%s" %(mp3_url_prefix, os.path.basename(png))
        md5 = hashlib.md5()
        with open(filename) as f:
            for hunk in iter(lambda: f.read(4096), ""):
                md5.update(hunk)
        md5_hex = md5.hexdigest()
        items.append(obj({
            "guid": md5_hex,
            "permalink": make_permalink(mp3_url_prefix, filename, md5_hex),
            "title": mp3_attr(mp3, "TIT2"),
            "pubDate": mtime(filename).strftime('%a, %d %b %Y %H:%M:%S GMT'),
            "duration": seconds2duration(mp3.info.length),
            "author": mp3_attr(mp3, "TPE1"),
            "summary": mp3_attr(mp3, "COMM::'eng'"),
            "image_url": image_url,
            "size": str(os.path.getsize(filename)),
        }))

    context = {
        "title": "xvzf: True Stories from Toronto Tech Workers",
        "link": "http://xvzf.io",
        "feed_url": feed_url,
        "image_url": "http://src.xvzf.io/podcast.png",
        "author": obj({
            "name": "xvzf",
            "email": "hello@xvzf.io",
            "uri": "http://xvzf.io",
        }),
        "owner": obj({
            "name": "David Wolever",
            "email": "david@wolever.net",
        }),
        "contributors": [
            obj({"name": u"Phillip Mendon√ßa-Vieira", "email": "phillmv@okayfail.com"}),
            obj({"name": "David Wolever", "email": "david@wolever.net"}),
        ],
        "description": """
            xvzf is a regularly occuring night for Toronto tech workers to come
            together and share true, personal stories. Find out more at xvzf.io.
        """,
        "categories": ["Technology", "Society & Culture"],
        "items": items,
    }

    template_file = os.path.join(os.path.dirname(__file__), "template.xml")
    template = Template(
        open(template_file).read().decode("utf-8"),
        default_filters=["x"],
    )
    try:
        print template.render(**context).encode("utf-8")
    except:
        print exceptions.text_error_template().render()

if __name__ == "__main__":
    sys.exit(main())
